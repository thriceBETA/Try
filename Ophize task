Here, I am creating a minimal registration page using HTML:

<form id = "registrationForm">
	<label for = "username">Username: </label>
	<input type = "text" id = "username" name = "username" required>
	<label for = "username">Email: </label>
	<input type = "email" id = "email" name = "email" required>
	<label for = "username">Password: </label>
	<input type = "password" id = "password" name = "password" required>
	<button type = "submit">Register</button>
</form>


Next, I am creating userregistration:

const express = require('express');
const User = require('../models/User');
const router = express.Router();
const bcrypt = require('bcrypt');
router.post('/register', async (req, res) => 
{ 
const
{ username, email, password} = req.body;
if (!email || !password || !username)
{
	return res.status(400).json({error: "Fields should not be empty !!!"});
}

const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
if (!emailRegex.test(email))
{
	return res.status(400).json({error: "Invalid email!!"});
}
if (password.length < 8)
{
	return res.status(400).json({error: "Password must be atleast 8 characters!"});
}

const existingUser = await User.findOne({email});
if (existingUser)
{
	return res.status(400).json({error: "This Email already exists!"});
}

const hashedPassword = await bcrypt.hash(password, 10);
const newUser = new User({username, email, password: hashedPassword});
await newUser.save();

res.json({message: "Registration Successful!!"});
});


Next, I am creating a minimal login using HTML:

<form id = "loginForm">
	<label for = "username">Email: </label>
	<input type = "email" id = "email" name = "email" required>
	<label for = "username">Password: </label>
	<input type = "password" id = "password" name = "password" required>
	<button type = "submit">Login</button>
</form>


Next, I am creating user login


const jwt = require('jsonwebtoken');
router.post('/register', async (req, res) => 
{ 
const
{ email, password} = req.body;
if (!email || !password)
{
	return res.status(400).json({error: "Fields should not be empty !!!"});
}

const user = await User.findOne({email});
if (!user)
{
	return res.status(400).json({error: "User does not exist."});
}

const isPasswordValid = await bycrypt.compare(password, user.password);
if (!isPasswordValid)
{
	return res.status(400).json({error: "Invalid Password!!!"});
}

const token = jwt.sign({id: user._id}, process.env.JWT_SECRET, {expireIn:"1h"});
res.json({token});
});



After this, 

const express = require('express');
const mongoose = require('mongoose');
const express = require('./routes/users');
const app = express();
mongoose.
